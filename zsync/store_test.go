package zsync_test

import (
	"io"
	"sync"
	"testing"

	"github.com/aileron-projects/go/zsync"
	"github.com/aileron-projects/go/ztesting"
)

func newTestStore() *sync.Map {
	store := sync.Map{}
	store.Store("string", "abc")
	store.Store("int", int(-123))
	store.Store("int8", int8(-123))
	store.Store("int16", int16(-123))
	store.Store("int32", int32(-123))
	store.Store("int64", int64(-123))
	store.Store("uint", uint(123))
	store.Store("uint8", uint8(123))
	store.Store("uint16", uint16(123))
	store.Store("uint32", uint32(123))
	store.Store("uint64", uint64(123))
	store.Store("uintptr", uintptr(123))
	store.Store("float32", float32(123.45))
	store.Store("float64", float64(123.45))
	store.Store("complex64", complex64(1+2i))
	store.Store("complex128", complex128(1+2i))
	store.Store("nil", nil)
	store.Store("EOF", io.EOF)
	store.Store("struct", struct{}{})
	return &store
}

func TestLoad(t *testing.T) {
	t.Parallel()
	store := newTestStore()
	t.Run("not found", func(t *testing.T) {
		val, ok := zsync.Load[any, string](store, "not found")
		ztesting.AssertEqual(t, "wrong result of ok.", false, ok)
		ztesting.AssertEqual(t, "value matched.", "", val)
	})
	t.Run("primitive assertion failed", func(t *testing.T) {
		val, ok := zsync.Load[any, string](store, "nil")
		ztesting.AssertEqual(t, "wrong result of ok.", false, ok)
		ztesting.AssertEqual(t, "value matched.", "", val)
	})
	t.Run("interface assertion failed", func(t *testing.T) {
		val, ok := zsync.Load[any, error](store, "nil")
		ztesting.AssertEqual(t, "wrong result of ok.", false, ok)
		ztesting.AssertEqual(t, "value matched.", nil, val)
	})
	t.Run("load string", func(t *testing.T) {
		val, ok := zsync.Load[any, string](store, "string")
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", "abc", val)
	})
	t.Run("load int", func(t *testing.T) {
		val, ok := zsync.Load[any, int](store, "int")
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", int(-123), val)
	})
	t.Run("load int8", func(t *testing.T) {
		val, ok := zsync.Load[any, int8](store, "int8")
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", int8(-123), val)
	})
	t.Run("load int16", func(t *testing.T) {
		val, ok := zsync.Load[any, int16](store, "int16")
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", int16(-123), val)
	})
	t.Run("load int32", func(t *testing.T) {
		val, ok := zsync.Load[any, int32](store, "int32")
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", int32(-123), val)
	})
	t.Run("load int64", func(t *testing.T) {
		val, ok := zsync.Load[any, int64](store, "int64")
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", int64(-123), val)
	})
	t.Run("load uint", func(t *testing.T) {
		val, ok := zsync.Load[any, uint](store, "uint")
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", uint(123), val)
	})
	t.Run("load uint8", func(t *testing.T) {
		val, ok := zsync.Load[any, uint8](store, "uint8")
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", uint8(123), val)
	})
	t.Run("load uint16", func(t *testing.T) {
		val, ok := zsync.Load[any, uint16](store, "uint16")
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", uint16(123), val)
	})
	t.Run("load uint32", func(t *testing.T) {
		val, ok := zsync.Load[any, uint32](store, "uint32")
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", uint32(123), val)
	})
	t.Run("load uint64", func(t *testing.T) {
		val, ok := zsync.Load[any, uint64](store, "uint64")
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", uint64(123), val)
	})
	t.Run("load uintptr", func(t *testing.T) {
		val, ok := zsync.Load[any, uintptr](store, "uintptr")
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", uintptr(123), val)
	})
	t.Run("load float32", func(t *testing.T) {
		val, ok := zsync.Load[any, float32](store, "float32")
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", float32(123.45), val)
	})
	t.Run("load float64", func(t *testing.T) {
		val, ok := zsync.Load[any, float64](store, "float64")
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", float64(123.45), val)
	})
	t.Run("load complex64", func(t *testing.T) {
		val, ok := zsync.Load[any, complex64](store, "complex64")
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", complex64(1+2i), val)
	})
	t.Run("load complex128", func(t *testing.T) {
		val, ok := zsync.Load[any, complex128](store, "complex128")
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", complex128(1+2i), val)
	})
	t.Run("load error", func(t *testing.T) {
		val, ok := zsync.Load[any, error](store, "EOF")
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", io.EOF, val)
	})
	t.Run("load struct", func(t *testing.T) {
		val, ok := zsync.Load[any, struct{}](store, "struct")
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", struct{}{}, val)
	})
}

func TestSwap(t *testing.T) {
	t.Parallel()
	store := newTestStore()
	t.Run("not found", func(t *testing.T) {
		prev, loaded, ok := zsync.Swap[any, string](store, "not found", "swapped")
		ztesting.AssertEqual(t, "wrong result of loaded.", false, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", false, ok)
		ztesting.AssertEqual(t, "value matched.", "", prev)
		v, _ := store.Load("not found")
		ztesting.AssertEqual(t, "value matched.", "swapped", v)
	})
	t.Run("primitive assertion failed", func(t *testing.T) {
		store.Store("nil", nil)
		prev, loaded, ok := zsync.Swap[any, string](store, "nil", "swapped")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", false, ok)
		ztesting.AssertEqual(t, "value matched.", "", prev)
		v, _ := store.Load("nil")
		ztesting.AssertEqual(t, "value matched.", "swapped", v)
	})
	t.Run("interface assertion failed", func(t *testing.T) {
		store.Store("nil", nil)
		prev, loaded, ok := zsync.Swap[any, error](store, "nil", "swapped")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", false, ok)
		ztesting.AssertEqual(t, "value matched.", nil, prev)
		v, _ := store.Load("nil")
		ztesting.AssertEqual(t, "value matched.", "swapped", v)
	})
	t.Run("swap string", func(t *testing.T) {
		prev, loaded, ok := zsync.Swap[any, string](store, "string", "swapped")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", "abc", prev)
		v, _ := store.Load("string")
		ztesting.AssertEqual(t, "value matched.", "swapped", v)
	})
	t.Run("swap int", func(t *testing.T) {
		prev, loaded, ok := zsync.Swap[any, int](store, "int", "swapped")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", int(-123), prev)
		v, _ := store.Load("int")
		ztesting.AssertEqual(t, "value matched.", "swapped", v)
	})
	t.Run("swap int8", func(t *testing.T) {
		prev, loaded, ok := zsync.Swap[any, int8](store, "int8", "swapped")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", int8(-123), prev)
		v, _ := store.Load("int8")
		ztesting.AssertEqual(t, "value matched.", "swapped", v)
	})
	t.Run("swap int16", func(t *testing.T) {
		prev, loaded, ok := zsync.Swap[any, int16](store, "int16", "swapped")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", int16(-123), prev)
		v, _ := store.Load("int16")
		ztesting.AssertEqual(t, "value matched.", "swapped", v)
	})
	t.Run("swap int32", func(t *testing.T) {
		prev, loaded, ok := zsync.Swap[any, int32](store, "int32", "swapped")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", int32(-123), prev)
		v, _ := store.Load("int32")
		ztesting.AssertEqual(t, "value matched.", "swapped", v)
	})
	t.Run("swap int64", func(t *testing.T) {
		prev, loaded, ok := zsync.Swap[any, int64](store, "int64", "swapped")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", int64(-123), prev)
		v, _ := store.Load("int64")
		ztesting.AssertEqual(t, "value matched.", "swapped", v)
	})
	t.Run("swap uint", func(t *testing.T) {
		prev, loaded, ok := zsync.Swap[any, uint](store, "uint", "swapped")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", uint(123), prev)
		v, _ := store.Load("uint")
		ztesting.AssertEqual(t, "value matched.", "swapped", v)
	})
	t.Run("swap uint8", func(t *testing.T) {
		prev, loaded, ok := zsync.Swap[any, uint8](store, "uint8", "swapped")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", uint8(123), prev)
		v, _ := store.Load("uint8")
		ztesting.AssertEqual(t, "value matched.", "swapped", v)
	})
	t.Run("swap uint16", func(t *testing.T) {
		prev, loaded, ok := zsync.Swap[any, uint16](store, "uint16", "swapped")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", uint16(123), prev)
		v, _ := store.Load("uint16")
		ztesting.AssertEqual(t, "value matched.", "swapped", v)
	})
	t.Run("swap uint32", func(t *testing.T) {
		prev, loaded, ok := zsync.Swap[any, uint32](store, "uint32", "swapped")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", uint32(123), prev)
		v, _ := store.Load("uint32")
		ztesting.AssertEqual(t, "value matched.", "swapped", v)
	})
	t.Run("swap uint64", func(t *testing.T) {
		prev, loaded, ok := zsync.Swap[any, uint64](store, "uint64", "swapped")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", uint64(123), prev)
		v, _ := store.Load("uint64")
		ztesting.AssertEqual(t, "value matched.", "swapped", v)
	})
	t.Run("swap uintptr", func(t *testing.T) {
		prev, loaded, ok := zsync.Swap[any, uintptr](store, "uintptr", "swapped")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", uintptr(123), prev)
		v, _ := store.Load("uintptr")
		ztesting.AssertEqual(t, "value matched.", "swapped", v)
	})
	t.Run("swap float32", func(t *testing.T) {
		prev, loaded, ok := zsync.Swap[any, float32](store, "float32", "swapped")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", float32(123.45), prev)
		v, _ := store.Load("float32")
		ztesting.AssertEqual(t, "value matched.", "swapped", v)
	})
	t.Run("swap float64", func(t *testing.T) {
		prev, loaded, ok := zsync.Swap[any, float64](store, "float64", "swapped")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", float64(123.45), prev)
		v, _ := store.Load("float64")
		ztesting.AssertEqual(t, "value matched.", "swapped", v)
	})
	t.Run("swap complex64", func(t *testing.T) {
		prev, loaded, ok := zsync.Swap[any, complex64](store, "complex64", "swapped")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", complex64(1+2i), prev)
		v, _ := store.Load("complex64")
		ztesting.AssertEqual(t, "value matched.", "swapped", v)
	})
	t.Run("swap complex128", func(t *testing.T) {
		prev, loaded, ok := zsync.Swap[any, complex128](store, "complex128", "swapped")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", complex128(1+2i), prev)
		v, _ := store.Load("complex128")
		ztesting.AssertEqual(t, "value matched.", "swapped", v)
	})
	t.Run("swap error", func(t *testing.T) {
		prev, loaded, ok := zsync.Swap[any, error](store, "EOF", "swapped")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", io.EOF, prev)
		v, _ := store.Load("EOF")
		ztesting.AssertEqual(t, "value matched.", "swapped", v)
	})
	t.Run("swap struct", func(t *testing.T) {
		prev, loaded, ok := zsync.Swap[any, struct{}](store, "struct", "swapped")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", struct{}{}, prev)
		v, _ := store.Load("struct")
		ztesting.AssertEqual(t, "value matched.", "swapped", v)
	})
}

func TestLoadAndDelete(t *testing.T) {
	t.Parallel()
	store := newTestStore()
	t.Run("not found", func(t *testing.T) {
		val, loaded, ok := zsync.LoadAndDelete[any, string](store, "not found")
		ztesting.AssertEqual(t, "wrong result of loaded.", false, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", false, ok)
		ztesting.AssertEqual(t, "value matched.", "", val)
		_, found := store.Load("not found")
		ztesting.AssertEqual(t, "value not deleted.", false, found)
	})
	t.Run("primitive assertion failed", func(t *testing.T) {
		store.Store("nil", nil)
		val, loaded, ok := zsync.LoadAndDelete[any, string](store, "nil")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", false, ok)
		ztesting.AssertEqual(t, "value matched.", "", val)
		_, found := store.Load("nil")
		ztesting.AssertEqual(t, "value not deleted.", false, found)
	})
	t.Run("interface assertion failed", func(t *testing.T) {
		store.Store("nil", nil)
		val, loaded, ok := zsync.LoadAndDelete[any, error](store, "nil")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", false, ok)
		ztesting.AssertEqual(t, "value matched.", nil, val)
		_, found := store.Load("nil")
		ztesting.AssertEqual(t, "value not deleted.", false, found)
	})
	t.Run("string", func(t *testing.T) {
		val, loaded, ok := zsync.LoadAndDelete[any, string](store, "string")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", "abc", val)
		_, found := store.Load("string")
		ztesting.AssertEqual(t, "value not deleted.", false, found)
	})
	t.Run("int", func(t *testing.T) {
		val, loaded, ok := zsync.LoadAndDelete[any, int](store, "int")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", int(-123), val)
		_, found := store.Load("int")
		ztesting.AssertEqual(t, "value not deleted.", false, found)
	})
	t.Run("int8", func(t *testing.T) {
		val, loaded, ok := zsync.LoadAndDelete[any, int8](store, "int8")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", int8(-123), val)
		_, found := store.Load("int8")
		ztesting.AssertEqual(t, "value not deleted.", false, found)
	})
	t.Run("int16", func(t *testing.T) {
		val, loaded, ok := zsync.LoadAndDelete[any, int16](store, "int16")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", int16(-123), val)
		_, found := store.Load("int16")
		ztesting.AssertEqual(t, "value not deleted.", false, found)
	})
	t.Run("int32", func(t *testing.T) {
		val, loaded, ok := zsync.LoadAndDelete[any, int32](store, "int32")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", int32(-123), val)
		_, found := store.Load("int32")
		ztesting.AssertEqual(t, "value not deleted.", false, found)
	})
	t.Run("int64", func(t *testing.T) {
		val, loaded, ok := zsync.LoadAndDelete[any, int64](store, "int64")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", int64(-123), val)
		_, found := store.Load("nil")
		ztesting.AssertEqual(t, "value not deleted.", false, found)
	})
	t.Run("uint", func(t *testing.T) {
		val, loaded, ok := zsync.LoadAndDelete[any, uint](store, "uint")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", uint(123), val)
		_, found := store.Load("nil")
		ztesting.AssertEqual(t, "value not deleted.", false, found)
	})
	t.Run("uint8", func(t *testing.T) {
		val, loaded, ok := zsync.LoadAndDelete[any, uint8](store, "uint8")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", uint8(123), val)
		_, found := store.Load("uint8")
		ztesting.AssertEqual(t, "value not deleted.", false, found)
	})
	t.Run("uint16", func(t *testing.T) {
		val, loaded, ok := zsync.LoadAndDelete[any, uint16](store, "uint16")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", uint16(123), val)
		_, found := store.Load("uint16")
		ztesting.AssertEqual(t, "value not deleted.", false, found)
	})
	t.Run("uint32", func(t *testing.T) {
		val, loaded, ok := zsync.LoadAndDelete[any, uint32](store, "uint32")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", uint32(123), val)
		_, found := store.Load("uint32")
		ztesting.AssertEqual(t, "value not deleted.", false, found)
	})
	t.Run("uint64", func(t *testing.T) {
		val, loaded, ok := zsync.LoadAndDelete[any, uint64](store, "uint64")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", uint64(123), val)
		_, found := store.Load("uint64")
		ztesting.AssertEqual(t, "value not deleted.", false, found)
	})
	t.Run("uintptr", func(t *testing.T) {
		val, loaded, ok := zsync.LoadAndDelete[any, uintptr](store, "uintptr")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", uintptr(123), val)
		_, found := store.Load("uintptr")
		ztesting.AssertEqual(t, "value not deleted.", false, found)
	})
	t.Run("float32", func(t *testing.T) {
		val, loaded, ok := zsync.LoadAndDelete[any, float32](store, "float32")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", float32(123.45), val)
		_, found := store.Load("float32")
		ztesting.AssertEqual(t, "value not deleted.", false, found)
	})
	t.Run("float64", func(t *testing.T) {
		val, loaded, ok := zsync.LoadAndDelete[any, float64](store, "float64")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", float64(123.45), val)
		_, found := store.Load("float64")
		ztesting.AssertEqual(t, "value not deleted.", false, found)
	})
	t.Run("complex64", func(t *testing.T) {
		val, loaded, ok := zsync.LoadAndDelete[any, complex64](store, "complex64")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", complex64(1+2i), val)
		_, found := store.Load("complex64")
		ztesting.AssertEqual(t, "value not deleted.", false, found)
	})
	t.Run("complex128", func(t *testing.T) {
		val, loaded, ok := zsync.LoadAndDelete[any, complex128](store, "complex128")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", complex128(1+2i), val)
		_, found := store.Load("complex128")
		ztesting.AssertEqual(t, "value not deleted.", false, found)
	})
	t.Run("error", func(t *testing.T) {
		val, loaded, ok := zsync.LoadAndDelete[any, error](store, "EOF")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", io.EOF, val)
		_, found := store.Load("EOF")
		ztesting.AssertEqual(t, "value not deleted.", false, found)
	})
	t.Run("struct", func(t *testing.T) {
		val, loaded, ok := zsync.LoadAndDelete[any, struct{}](store, "struct")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", struct{}{}, val)
		_, found := store.Load("struct")
		ztesting.AssertEqual(t, "value not deleted.", false, found)
	})
}

func TestLoadOrStore(t *testing.T) {
	t.Parallel()
	store := newTestStore()
	t.Run("not found", func(t *testing.T) {
		actual, loaded, ok := zsync.LoadOrStore[any, string](store, "not found", "stored")
		ztesting.AssertEqual(t, "wrong result of loaded.", false, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", false, ok)
		ztesting.AssertEqual(t, "value matched.", "", actual)
		v, _ := store.Load("not found")
		ztesting.AssertEqual(t, "value matched.", "stored", v)
	})
	t.Run("primitive assertion failed", func(t *testing.T) {
		store.Store("nil", nil)
		actual, loaded, ok := zsync.LoadOrStore[any, string](store, "nil", "stored")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", false, ok)
		ztesting.AssertEqual(t, "value matched.", "", actual)
		v, _ := store.Load("nil")
		ztesting.AssertEqual(t, "value matched.", nil, v)
	})
	t.Run("interface assertion failed", func(t *testing.T) {
		store.Store("nil", nil)
		actual, loaded, ok := zsync.LoadOrStore[any, error](store, "nil", "stored")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", false, ok)
		ztesting.AssertEqual(t, "value matched.", nil, actual)
		v, _ := store.Load("nil")
		ztesting.AssertEqual(t, "value matched.", nil, v)
	})
	t.Run("string", func(t *testing.T) {
		actual, loaded, ok := zsync.LoadOrStore[any, string](store, "string", "stored")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", "abc", actual)
		v, _ := store.Load("string")
		ztesting.AssertEqual(t, "value matched.", "abc", v)
	})
	t.Run("int", func(t *testing.T) {
		actual, loaded, ok := zsync.LoadOrStore[any, int](store, "int", "stored")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", int(-123), actual)
		v, _ := store.Load("int")
		ztesting.AssertEqual(t, "value matched.", any(int(-123)), v)
	})
	t.Run("int8", func(t *testing.T) {
		actual, loaded, ok := zsync.LoadOrStore[any, int8](store, "int8", "stored")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", int8(-123), actual)
		v, _ := store.Load("int8")
		ztesting.AssertEqual(t, "value matched.", any(int8(-123)), v)
	})
	t.Run("int16", func(t *testing.T) {
		actual, loaded, ok := zsync.LoadOrStore[any, int16](store, "int16", "stored")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", int16(-123), actual)
		v, _ := store.Load("int16")
		ztesting.AssertEqual(t, "value matched.", any(int16(-123)), v)
	})
	t.Run("int32", func(t *testing.T) {
		actual, loaded, ok := zsync.LoadOrStore[any, int32](store, "int32", "stored")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", int32(-123), actual)
		v, _ := store.Load("int32")
		ztesting.AssertEqual(t, "value matched.", any(int32(-123)), v)
	})
	t.Run("int64", func(t *testing.T) {
		actual, loaded, ok := zsync.LoadOrStore[any, int64](store, "int64", "stored")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", int64(-123), actual)
		v, _ := store.Load("int64")
		ztesting.AssertEqual(t, "value matched.", any(int64(-123)), v)
	})
	t.Run("uint", func(t *testing.T) {
		actual, loaded, ok := zsync.LoadOrStore[any, uint](store, "uint", "stored")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", uint(123), actual)
		v, _ := store.Load("uint")
		ztesting.AssertEqual(t, "value matched.", any(uint(123)), v)
	})
	t.Run("uint8", func(t *testing.T) {
		actual, loaded, ok := zsync.LoadOrStore[any, uint8](store, "uint8", "stored")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", uint8(123), actual)
		v, _ := store.Load("uint8")
		ztesting.AssertEqual(t, "value matched.", any(uint8(123)), v)
	})
	t.Run("uint16", func(t *testing.T) {
		actual, loaded, ok := zsync.LoadOrStore[any, uint16](store, "uint16", "stored")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", uint16(123), actual)
		v, _ := store.Load("uint16")
		ztesting.AssertEqual(t, "value matched.", any(uint16(123)), v)
	})
	t.Run("uint32", func(t *testing.T) {
		actual, loaded, ok := zsync.LoadOrStore[any, uint32](store, "uint32", "stored")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", uint32(123), actual)
		v, _ := store.Load("uint32")
		ztesting.AssertEqual(t, "value matched.", any(uint32(123)), v)
	})
	t.Run("uint64", func(t *testing.T) {
		actual, loaded, ok := zsync.LoadOrStore[any, uint64](store, "uint64", "stored")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", uint64(123), actual)
		v, _ := store.Load("uint64")
		ztesting.AssertEqual(t, "value matched.", any(uint64(123)), v)
	})
	t.Run("uintptr", func(t *testing.T) {
		actual, loaded, ok := zsync.LoadOrStore[any, uintptr](store, "uintptr", "stored")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", uintptr(123), actual)
		v, _ := store.Load("uintptr")
		ztesting.AssertEqual(t, "value matched.", any(uintptr(123)), v)
	})
	t.Run("float32", func(t *testing.T) {
		actual, loaded, ok := zsync.LoadOrStore[any, float32](store, "float32", "stored")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", float32(123.45), actual)
		v, _ := store.Load("float32")
		ztesting.AssertEqual(t, "value matched.", any(float32(123.45)), v)
	})
	t.Run("float64", func(t *testing.T) {
		actual, loaded, ok := zsync.LoadOrStore[any, float64](store, "float64", "stored")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", float64(123.45), actual)
		v, _ := store.Load("float64")
		ztesting.AssertEqual(t, "value matched.", any(float64(123.45)), v)
	})
	t.Run("complex64", func(t *testing.T) {
		actual, loaded, ok := zsync.LoadOrStore[any, complex64](store, "complex64", "stored")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", complex64(1+2i), actual)
		v, _ := store.Load("complex64")
		ztesting.AssertEqual(t, "value matched.", any(complex64(1+2i)), v)
	})
	t.Run("complex128", func(t *testing.T) {
		actual, loaded, ok := zsync.LoadOrStore[any, complex128](store, "complex128", "stored")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", complex128(1+2i), actual)
		v, _ := store.Load("complex128")
		ztesting.AssertEqual(t, "value matched.", any(complex128(1+2i)), v)
	})
	t.Run("error", func(t *testing.T) {
		actual, loaded, ok := zsync.LoadOrStore[any, error](store, "EOF", "stored")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", io.EOF, actual)
		v, _ := store.Load("EOF")
		ztesting.AssertEqual(t, "value matched.", any(io.EOF), v)
	})
	t.Run("struct", func(t *testing.T) {
		actual, loaded, ok := zsync.LoadOrStore[any, struct{}](store, "struct", "stored")
		ztesting.AssertEqual(t, "wrong result of loaded.", true, loaded)
		ztesting.AssertEqual(t, "wrong result of ok.", true, ok)
		ztesting.AssertEqual(t, "value matched.", struct{}{}, actual)
		v, _ := store.Load("struct")
		ztesting.AssertEqual(t, "value matched.", any(struct{}{}), v)
	})
}
