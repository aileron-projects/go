package zhmac

import (
	"bytes"
	"crypto"
	"crypto/hmac"
	"errors"
)

var (
	ErrNotAvailable = errors.New("zhmac: hash alg not available")
	ErrNotMatch     = errors.New("zhmac: hmac sum not match")
)

// Sum returns HMAC digest.
// It supports any hash algorithm supported by the standard [hash] package.
// Note that for blake2b families, it does not use HMAC mechanism that blake2b natively support.
// It panics with [ErrNotAvailable] if the given hash is not available.
//
// When testing or validating the results, we use openssl and python libraries.
//
// Openssl command examples:
//
//   - echo -n "text" | openssl dgst -hmac "key" -md4
//   - echo -n "text" | openssl dgst -hmac "key" -md5
//   - echo -n "text" | openssl dgst -hmac "key" -sha1
//   - echo -n "text" | openssl dgst -hmac "key" -sha224
//   - echo -n "text" | openssl dgst -hmac "key" -sha256
//   - echo -n "text" | openssl dgst -hmac "key" -sha256
//   - echo -n "text" | openssl dgst -hmac "key" -sha384
//   - echo -n "text" | openssl dgst -hmac "key" -sha512
//   - echo -n "text" | openssl dgst -hmac "key" -ripemd160
//   - echo -n "text" | openssl dgst -hmac "key" -sha3-224
//   - echo -n "text" | openssl dgst -hmac "key" -sha3-256
//   - echo -n "text" | openssl dgst -hmac "key" -sha3-384
//   - echo -n "text" | openssl dgst -hmac "key" -sha3-512
//   - echo -n "text" | openssl dgst -hmac "key" -sha512-224
//   - echo -n "text" | openssl dgst -hmac "key" -sha512-256
//   - echo -n "text" | openssl dgst -hmac "key" -blake2s256
//
// Python example:
//
//	>> import hmac, hashlib
//	>> def blake2b_256():
//	>>     return hashlib.blake2b(digest_size=32)
//	>> hmac.new(b"key",b"text", blake2b_256).hexdigest()
func Sum(h crypto.Hash, msg, key []byte) []byte {
	if !h.Available() {
		panic(ErrNotAvailable)
	}
	mac := hmac.New(h.New, key)
	_, _ = mac.Write(msg)
	return mac.Sum(nil)
}

// Equal reports if HMAC digest generated by the msg and key
// and the sum are the same or not.
func Equal(h crypto.Hash, msg, key, sum []byte) bool {
	return Compare(h, msg, key, sum) == nil
}

// Compare compares HMAC digest generated by the msg and key and the sum.
// If they matched, it returns nil. If not matched, it returns non-nil error.
func Compare(h crypto.Hash, msg, key, sum []byte) (err error) {
	defer func() {
		r := recover()
		if r != nil {
			err, _ = r.(error)
		}
	}()
	if !bytes.Equal(sum, Sum(h, msg, key)) {
		return ErrNotMatch
	}
	return nil
}
