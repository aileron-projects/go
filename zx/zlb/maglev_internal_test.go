package zlb

import (
	"strconv"
	"testing"

	"github.com/aileron-projects/go/ztesting"
)

func TestGenPrimeEuler(t *testing.T) {
	t.Parallel()

	testCases := map[string]struct {
		min  int
		want int
	}{
		"case01": {0, 3},
		"case02": {2, 3},
		"case03": {3, 3},
		"case04": {4, 5},
		"case05": {37, 37},
		"case06": {38, 41},
		"case07": {41, 41},
		"case08": {42, 43},
		"case09": {1680, 1847},
	}

	for name, tc := range testCases {
		t.Run(name, func(t *testing.T) {
			prime := genPrimeEuler(tc.min)
			ztesting.AssertEqual(t, "prime number not match", tc.want, prime)

		})
	}
}

func TestIsPrime(t *testing.T) {
	t.Parallel()

	testCases := map[string]struct {
		prime bool
		num   []int
	}{
		"less than 2": {false, []int{-3, -2, -1, 0, 1}},
		"2":           {true, []int{2}}, // 2 is prime.
		"even":        {false, []int{4, 50, 100, 200, 500, 1000}},
		"odd":         {false, []int{27, 123, 99}},
		"prime": {true, []int{
			8803, 8807, 8819, 8821, 8831,
			8837, 8839, 8849, 8861, 8863,
			8867, 8887, 8893, 8923, 8929,
			8933, 8941, 8951, 8963, 8969,
			8971, 8999, 9001, 9007, 9011,
			9013, 9029, 9041, 9043, 9049,
			9059, 9067, 9091, 9103, 9109,
			9127, 9133, 9137, 9151, 9157,
			9161, 9173, 9181, 9187, 9199,
			9203, 9209, 9221, 9227, 9239,
			9241, 9257, 9277, 9281, 9283,
			9293, 9311, 9319, 9323, 9337,
			9341, 9343, 9349, 9371, 9377,
			9391, 9397, 9403, 9413, 9419,
			9421, 9431, 9433, 9437, 9439,
			9461, 9463, 9467, 9473, 9479,
			9491, 9497, 9511, 9521, 9533,
			9539, 9547, 9551, 9587, 9601,
			103231, 103237, 103289, 103291, 103307,
			103319, 103333, 103349, 103357, 103387,
			103391, 103393, 103399, 103409, 103421,
			103423, 103451, 103457, 103471, 103483,
			103511, 103529, 103549, 103553, 103561,
			103567, 103573, 103577, 103583, 103591,
			103613, 103619, 103643, 103651, 103657,
			103669, 103681, 103687, 103699, 103703,
			103723, 103769, 103787, 103801, 103811,
			103813, 103837, 103841, 103843, 103867,
			103889, 103903, 103913, 103919, 103951,
			103963, 103967, 103969, 103979, 103981,
			103991, 103993, 103997, 104003, 104009,
			104021, 104033, 104047, 104053, 104059,
			104087, 104089, 104107, 104113, 104119,
			104123, 104147, 104149, 104161, 104173,
			104179, 104183, 104207, 104231, 104233,
			104239, 104243, 104281, 104287, 104297,
			104309, 104311, 104323, 104327, 104347,
			104369, 104381, 104383, 104393, 104399,
			104417, 104459, 104471, 104473, 104479,
			104491, 104513, 104527, 104537, 104543,
			104549, 104551, 104561, 104579, 104593,
			104597, 104623, 104639, 104651, 104659,
			104677, 104681, 104683, 104693, 104701,
		}},
	}

	for name, tc := range testCases {
		t.Run(name, func(t *testing.T) {
			for _, num := range tc.num {
				prime := isPrime(num)
				ztesting.AssertEqual(t, "isPrime not match: "+strconv.Itoa(num), tc.prime, prime)
			}
		})
	}
}
